package com.tsdm.angelanime.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tsdm.angelanime.bean.RecentlyData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECENTLY_DATA".
*/
public class RecentlyDataDao extends AbstractDao<RecentlyData, Long> {

    public static final String TABLENAME = "RECENTLY_DATA";

    /**
     * Properties of entity RecentlyData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Elements = new Property(1, String.class, "elements", false, "ELEMENTS");
        public final static Property Schedule = new Property(2, String.class, "schedule", false, "SCHEDULE");
        public final static Property Classify = new Property(3, String.class, "classify", false, "CLASSIFY");
    }


    public RecentlyDataDao(DaoConfig config) {
        super(config);
    }
    
    public RecentlyDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENTLY_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ELEMENTS\" TEXT," + // 1: elements
                "\"SCHEDULE\" TEXT," + // 2: schedule
                "\"CLASSIFY\" TEXT);"); // 3: classify
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENTLY_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentlyData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String elements = entity.getElements();
        if (elements != null) {
            stmt.bindString(2, elements);
        }
 
        String schedule = entity.getSchedule();
        if (schedule != null) {
            stmt.bindString(3, schedule);
        }
 
        String classify = entity.getClassify();
        if (classify != null) {
            stmt.bindString(4, classify);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentlyData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String elements = entity.getElements();
        if (elements != null) {
            stmt.bindString(2, elements);
        }
 
        String schedule = entity.getSchedule();
        if (schedule != null) {
            stmt.bindString(3, schedule);
        }
 
        String classify = entity.getClassify();
        if (classify != null) {
            stmt.bindString(4, classify);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecentlyData readEntity(Cursor cursor, int offset) {
        RecentlyData entity = new RecentlyData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // elements
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // schedule
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // classify
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentlyData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setElements(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSchedule(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClassify(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecentlyData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecentlyData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentlyData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
